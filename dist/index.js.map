{"version":3,"file":"index.js","sources":["../src/FishCalculator.js","../src/FlowerCalculator.js","../src/GolfCalculator.js","../src/RacingCalculator.js","../src/SuitsCalculator.js"],"sourcesContent":["export default class FishCalculator {\r\n    constructor(data) {\r\n        /**\r\n         * Initialize the calculator by loading fish and the rod type.\r\n         * \r\n         * @param {string} data: Json containing the toon's fish progress.\r\n         */\r\n        this.fishingInfo = null;\r\n        this.loadFishData();\r\n\r\n        this.locationInfo = null;\r\n        this.loadLocationData();\r\n\r\n        const toon = JSON.parse(data);\r\n        this.rodInfo = this.fishingInfo.rods[toon.rod.name];\r\n        this.caught = this.#getCaughtBy(toon);\r\n        this.catchable = this.getCatchable();\r\n        this.bonus = 1.1;\r\n    }\r\n\r\n    async loadFishData() {\r\n        try {\r\n            const response = await import('../data/fish.json');\r\n            this.fishingInfo = response;\r\n        } catch (error) {\r\n            console.error('Error loading fish data:', error);\r\n        }\r\n    }\r\n\r\n    async loadLocationData() {\r\n        try {\r\n            const response = await import('../data/locations.json');\r\n            this.locationInfo = response;\r\n        } catch (error) {\r\n            console.error('Error loading locations data:', error);\r\n        }\r\n    }\r\n\r\n    sortBestLocation() {\r\n        /**\r\n         * Finds the chance of catching a new fish at all locations.\r\n         * \r\n         * @returns {Object[]} - sorted locations with chance to catch a new fish, descending\r\n         */\r\n    \r\n        const locations = this.#getLocationRanks();\r\n        const bestLocation = {};\r\n        let buckets;\r\n\r\n        for (const [location, rarities] of Object.entries(locations)) {\r\n            const total = Math.min(Object.values(rarities).reduce((sum,value) => sum+value, 0), 1);\r\n            buckets = this.#getBucketsByLocation(total);\r\n            \r\n            if (buckets !== 0) {\r\n                const playground = Object.entries(this.locationInfo).find(([pg, streets]) => streets.includes(location));\r\n\r\n                if (playground) {\r\n                    const playgroundProb = bestLocation[playground[0]]?.total || 0;\r\n                    // Exclude street if it has the same probability as the playground\r\n                    if (playgroundProb === total) continue;\r\n                }\r\n                \r\n                bestLocation[location] = { total, buckets };\r\n            }\r\n        }\r\n        \r\n        return Object.entries(bestLocation).sort((a,b) => b[1].total - a[1].total);\r\n    }\r\n\r\n    sortBestRarity() {\r\n        /**\r\n         * Sorts all fish by most likely to get new. \r\n         * \r\n         * @returns {Array} - sorted fish with their best location, descending\r\n         */\r\n        let probabilities = [];\r\n        for (const fish of this.getNew()) {\r\n            probabilities.push(this.#getHighestProbability(fish))\r\n        }\r\n        return probabilities.sort((a,b) => b.probability - a.probability);\r\n    }\r\n\r\n    getUncaught() {\r\n        /**\r\n         * Finds all fish the toon hasn't caught.\r\n         * \r\n         * @returns {Array} gatheredFish - All uncaught fish, regardless of rod\r\n         */\r\n        let gatheredFish = [];\r\n        for (let fish of this.fishingInfo.fish) {\r\n            if (!this.caught.includes(fish)) {\r\n                gatheredFish.push(fish);\r\n            }\r\n        }\r\n        return gatheredFish;\r\n    }\r\n\r\n    getCatchable() {\r\n        /**\r\n         * Finds all fish that can be caught.\r\n         *\r\n         * @returns {Array} gatheredFish - The fish that can be caught by rod.\r\n         */\r\n        let gatheredFish = [];\r\n        for (let fish of this.fishingInfo.fish) {\r\n            if (fish.weight_min <= this.rodInfo.weight_max) {\r\n                gatheredFish.push(fish);\r\n            }\r\n        }\r\n        return gatheredFish;\r\n    }\r\n\r\n    getCaught() {\r\n        /**\r\n         * Returns the fish that the toon has caught.\r\n         * \r\n         * @returns {Array} caught\r\n         */\r\n        return this.caught;\r\n    }\r\n\r\n    getNew() {\r\n        /**\r\n         * Finds uncaught, catchable fish.\r\n         * \r\n         * @returns {Array} - all uncaught, catchable fish\r\n         */\r\n        return this.catchable.filter(fish => !this.caught.includes(fish.name));\r\n    }\r\n\r\n    getByLocation(location) {\r\n        /**\r\n         * Finds ALL catchable fish at the desired location.\r\n         * If a fish has 'Anywhere', they are added.\r\n         * If a fish has location, they are added.\r\n         * If location is a street, the playground's fish are added.\r\n         *\r\n         * @param {string} location - The location to get fish from.\r\n         * @returns {Array} gatheredFish - The fish at location.\r\n         */\r\n        let gatheredFish = [];\r\n        for (let fish of this.getCatchable()) {\r\n            if (fish.locations.includes(location)) {\r\n                gatheredFish.push(fish);\r\n            }\r\n            if (fish.locations.includes('Anywhere')) {\r\n                gatheredFish.push(fish);\r\n            }\r\n\r\n            for (let [playground, streets] of Object.entries(this.locationInfo)) {\r\n                if (playground === location) { // location is a playground\r\n                    if (streets.some(street => fish.locations.includes(street))) {\r\n                        // add if fish is located in pg street\r\n                        gatheredFish.push(fish);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // add playground fish \r\n        for (let [playground, streets] of Object.entries(this.locationInfo)) {\r\n            if (streets.includes(location)) {\r\n                let pgFish = this.getByLocation(playground)\r\n                pgFish.forEach(fish => gatheredFish.push(fish));\r\n            }\r\n        }\r\n        return gatheredFish;\r\n    }\r\n\r\n    sortByRarity() {\r\n        /**\r\n         * Sorts ALL CATCHABLE fish into a dictionary based on their rarity. Fish may \r\n         * be listed twice if they are available in various locations.\r\n         *\r\n         * @returns {Object} gatheredFish - Catchable, uncaught fish sorted by rarity. \r\n         */\r\n        let gatheredFish = Object.fromEntries(Array.from({length: 10}, (_, i) => [i + 1, []]));\r\n        for (let fish of this.catchable) {\r\n            let rarityScale = fish.rarity;\r\n            for (let location of fish.locations) {\r\n                gatheredFish[rarityScale].push(fish);\r\n                if (rarityScale < 10) { // max fish rarity\r\n                    rarityScale++;\r\n                }\r\n            }\r\n        }\r\n        return gatheredFish;\r\n    }\r\n\r\n    #getBucketsByLocation(total) {\r\n        /**\r\n         * Estimates number of buckets you need to fill to be 90% sure you catch a new fish\r\n         * at this location\r\n         * \r\n         * @param {int} total probability of location\r\n         * @returns estimated number of buckets\r\n         */\r\n        if (total >= 1) {\r\n            return 1;\r\n        } else if (total <= 0) {\r\n            return 0;\r\n        }\r\n        const confidence = 1 - 0.90;\r\n        const bucketCapacity = 20;\r\n        const missProb = 1 - total;\r\n\r\n        const attempts = Math.log(confidence) / Math.log(missProb);\r\n        return Math.ceil(attempts / bucketCapacity);\r\n    }\r\n\r\n    #getBuckets(fish) {\r\n        /**\r\n         * Estimates number of buckets you need to fill to be 90% sure you catch the desired fish\r\n         * \r\n         * @param {Object[]} fish - desired fish\r\n         * @returns estimated number of buckets\r\n         */\r\n        const confidence = 1 - 0.90;\r\n        const bucketCapacity = 20;\r\n        const catchProb = fish.probability;\r\n        const missProb = 1 - catchProb;\r\n\r\n        const attempts = Math.log(confidence) / Math.log(missProb);\r\n        return Math.ceil(attempts / bucketCapacity);\r\n    }\r\n\r\n    #getByLocationRarity(location, rarity) {\r\n        /**\r\n         * Finds ALL filterFish at the desired location with specified rarity.\r\n         *\r\n         * @param {string} location - The location to get fish from.\r\n         * @param {int} rarity - The desired rarity.\r\n         * @returns {Array} gatheredFish - The fish at location with rarity\r\n         */\r\n        let gatheredFish = [];\r\n        const fishList = this.getByLocation(location);\r\n        \r\n        const fishMatch = (loc, rar, fish) => {\r\n            const rarityIndex = this.#getRarity(fish, loc);\r\n            if (rarityIndex === rar && !gatheredFish.includes(fish)) {\r\n                gatheredFish.push(fish);\r\n            }\r\n        }\r\n\r\n        const playground = Object.entries(this.locationInfo).find(([pg, streets]) => streets.includes(location))?.[0];\r\n\r\n        for (let fish of fishList) {\r\n            if (fish.locations.includes(location)) {\r\n                fishMatch(location, rarity, fish);\r\n            }\r\n            \r\n            if (playground && fish.locations.includes(playground)) {\r\n                fishMatch(playground, rarity, fish);\r\n            }\r\n\r\n            if (fish.locations.includes('Anywhere')) {\r\n                fishMatch('Anywhere', rarity, fish);\r\n            }\r\n\r\n            // fish can get added if they have a street and playground\r\n            for (let [playground, streets] of Object.entries(this.locationInfo)) {\r\n                if (playground === location && streets.some(street => fish.locations.includes(street)) && !gatheredFish.includes(fish)) {\r\n                    fishMatch(playground, rarity, fish);\r\n                }\r\n            }\r\n        }\r\n\r\n        return gatheredFish;\r\n    }\r\n\r\n    #getLocationRanks() {\r\n        /**\r\n         * Calculates the chance of catching a new fish in each rarity for each location\r\n         * \r\n         * @returns all locations with new fish probability in each rarity\r\n         */\r\n        let locations = {};\r\n\r\n        for (const pg in this.locationInfo) {\r\n            locations[pg] = this.#getRarityByLocation(pg);\r\n            for (const street of this.locationInfo[pg]) {\r\n                locations[street] = this.#getRarityByLocation(street);\r\n            }\r\n        }\r\n        return locations;\r\n    }\r\n\r\n    #getRarityByLocation(location) {\r\n        const data = {};\r\n\r\n        for (let rarity = 1; rarity <= 10; rarity++) {\r\n            const rarityFish = this.#getByLocationRarity(location, rarity);\r\n            const rodRarity = this.rodInfo.probability[rarity - 1];\r\n            if (rarityFish.length > 0) {\r\n                const totalFish = rarityFish.length;\r\n                const newFish = rarityFish.filter(fish => !this.caught.includes(fish.name));\r\n                data[rarity] = rodRarity * (newFish.length / totalFish);\r\n            } else {\r\n                data[rarity] = 0;\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    #checkBonus(fish, loc) {\r\n        /**\r\n         * Applies probability bonus if applicable.\r\n         * @param fish to check\r\n         * @param loc to check\r\n         * @returns probability multiplier\r\n         */\r\n        if (fish.bonus && fish.bonus === loc) {\r\n            return this.bonus;\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    #getSmallestLocation(filterFish) {\r\n        /**\r\n         * Find the smallest location size based on filterFish\r\n         * \r\n         * @param {Array} filterFish to find smallest location of\r\n         * @returns {Array} containing the smallest location and its fish\r\n         */\r\n        const locations = {}\r\n        for (const fish of filterFish) {\r\n            for (const loc of fish.locations) {\r\n                if (loc != 'Anywhere') {\r\n                    if (!locations[loc]) {\r\n                        locations[loc] = [];\r\n                    }\r\n                    locations[loc].push(fish);\r\n                }\r\n            }\r\n        }\r\n\r\n        let minLength = Infinity;\r\n        let minLocation = null;\r\n        for (const loc in locations) {\r\n            if (locations[loc].length < minLength) {\r\n                minLength = locations[loc].length;\r\n                minLocation = loc;\r\n            }\r\n        }\r\n        return locations[minLocation];\r\n    }\r\n\r\n    #getCaughtBy(toon) {\r\n        /**\r\n         * Finds and organizes all fish the toon has caught.\r\n         * \r\n         * @param {string} toon - JSON containing the toon's fish information from the API\r\n         * @returns {Object[]} - JSON of the organized fish\r\n         */\r\n        const fish = [];\r\n        // extract fish from grouped fish types\r\n        for (const key in toon.collection) {\r\n            const album = toon.collection[key].album;\r\n            for (const type in album) {\r\n                fish.push(album[type].name);\r\n            }\r\n        }\r\n        return fish;\r\n    }\r\n\r\n    #getHighestProbability(fish) {\r\n        /**\r\n         * Chooses highest probability fish location.\r\n         * \r\n         * @param {Array} fish - to determine probabilities of\r\n         * @returns {Array} - element of best fish location\r\n         */\r\n        return this.#getLocationProbabilities(fish).reduce((best, curr) => \r\n            curr.probability > best.probability ? curr : best,\r\n            { probability: 0, location: null }  \r\n        );\r\n    }\r\n\r\n    #getRarity(fish, loc) {\r\n        /**\r\n         * Finds rarity based off fish\r\n         * \r\n         * @param {Array} fish to determine rarity of\r\n         * @param {String} loc to determine rarity index of\r\n         * @returns rarity\r\n         */\r\n        const rarity = fish.rarity + fish.locations.indexOf(loc)\r\n        return rarity < 10 ? rarity : 10;\r\n    }\r\n\r\n    #getRodRarity(fish, loc) {\r\n        /**\r\n         * Finds rod rarity based off fish.\r\n         * \r\n         * @param {Array} fish to determine rod rarity of\r\n         * @param {String} loc to determine rarity of\r\n         * @returns rod rarity\r\n         */\r\n        const rarity = this.#getRarity(fish, loc);\r\n        return this.rodInfo.probability[rarity-1];\r\n    }\r\n    \r\n    #getLocationProbabilities(fish) {\r\n        /**\r\n         * Finds all of fish's probabilities at all their locations.\r\n         * \r\n         * @param {Array} fish - to determine probabilities of\r\n         * @returns {Array} - elements of fish probabilities at each location\r\n         */\r\n        const probabilities = [];\r\n        let related;\r\n        for (const loc of fish.locations) {\r\n            const rarityFriends = this.sortByRarity()[this.#getRarity(fish,loc)];\r\n\r\n            if (loc == 'Anywhere') {\r\n                if (fish.locations[0] == loc) {\r\n                    related = this.#getSmallestLocation(rarityFriends);\r\n                    // related.length is incremented to account for fish not being found\r\n                    probabilities.push( {\r\n                        name: fish.name,\r\n                        probability: this.#getRodRarity(fish, loc) / (related.length+1),\r\n                        location: related[0].locations[0]\r\n                    });\r\n                } else {\r\n                    // anywhere is an extra location; add rarity to all previous locations\r\n                    for (let entry of probabilities) {\r\n                        related = this.#getByLocationRarity(entry.location, this.#getRarity(fish, loc));\r\n                        // related.length is incremented to account for fish not being found\r\n                        entry.probability += this.#getRodRarity(fish,loc) / (related.length+1);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                // add base rarity \r\n                for (let [playground, streets] of Object.entries(this.locationInfo)) {\r\n                    if (loc === playground) {\r\n                        // get fish of rarity in playground\r\n                        const pgRarity = this.#getRarity(fish,playground)\r\n                        related = this.#getByLocationRarity(playground, pgRarity);\r\n\r\n                        // add pg fish to every street related\r\n                        const prob = this.#getRodRarity(fish, playground) * this.#checkBonus(fish, playground)\r\n                        for (let street of streets) {\r\n                            const existing = probabilities.find(entry => entry.name === fish.name && entry.location === street);\r\n                            if (!existing) {\r\n                                const stRelated = this.#getByLocationRarity(street, pgRarity)\r\n                                const total = related.length + stRelated.length;\r\n                                probabilities.push({\r\n                                    name: fish.name,\r\n                                    probability: prob / total,\r\n                                    location: street\r\n                                })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // location is a street; gets added individually\r\n                        related = this.#getByLocationRarity(loc, this.#getRarity(fish,loc));\r\n                        const prob = this.#getRodRarity(fish, loc) * this.#checkBonus(fish, loc)\r\n\r\n                        probabilities.push( { \r\n                            name: fish.name, \r\n                            probability: prob / related.length, \r\n                            location: loc \r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        for (const item of probabilities) {\r\n            item.buckets = this.#getBuckets(item);\r\n        }\r\n        \r\n        return probabilities;\r\n    }\r\n}","export default class FlowerCalculator {\r\n    constructor(data) {\r\n        /**\r\n         * Initializes the flower calculator.\r\n         *\r\n         * @param {string} data: JSON containing the toon's flower progress.\r\n         */\r\n        this.combos = null;\r\n        this.loadFlowerData();\r\n\r\n        this.toon = JSON.parse(data);\r\n    }\r\n\r\n    async loadFlowerData() {\r\n        try {\r\n            const data = await import('../data/flowers_combos.json');\r\n            this.golf_info = data.flowers;\r\n        } catch (error) {\r\n            console.error('Error loading flower data:', error);\r\n        }\r\n    }\r\n\r\n    getCombo(num) {\r\n        return Object.entries(this.combos).filter(([flower, combo]) => combo.length === num);\r\n    }\r\n}","export default class GolfCalculator {\r\n    constructor(data) {\r\n        /**\r\n         * Initializes the golf calculator.\r\n         *\r\n         * @param {string} data: JSON containing the toon's golf progress.\r\n         */\r\n        this.golf_info = null;\r\n        this.loadGolfData;\r\n\r\n        this.toon = JSON.parse(data);\r\n        this.toon = Object.fromEntries(this.toon.map(trophy => [trophy.name, trophy.num]));\r\n    }\r\n    \r\n    async loadGolfData() {\r\n        try {\r\n            const response = await import('../data/golf_trophies.json');\r\n            this.golf_info = response.trophies;\r\n        } catch (error) {\r\n            console.error('Error loading golf data:', error);\r\n        }\r\n    }\r\n\r\n    getBestTrophy() {\r\n        /**\r\n         * Finds the easiest trophies to complete (closest to next requirement)\r\n         * \r\n         * @returns {Object[]} - JSON containing list of all uncompleted trophies. Index 0 has the easiest trophy.\r\n         *   Each trophy has the following format:\r\n         *       name: The trophy's name (generalized)\r\n         *       progress.current: The current progress\r\n         *       progress.required: The next required trophy value.\r\n         *       progress.difference: The difference to the requirement.\r\n         */\r\n        const trophies = [];\r\n        for (const trophy of this.golf_info) {\r\n            const count = this.toon[trophy.description];\r\n            for (const req of trophy.values) {\r\n                if (count < req) {\r\n                    const diff = req - count;\r\n                    const weight = trophy.weight;\r\n                    const score = weight * diff;\r\n                    trophies.push({\r\n                        name: trophy.description,\r\n                        progress: {\r\n                            current: count,\r\n                            required: req,\r\n                            difference: diff\r\n                        },\r\n                        score: score\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        trophies.sort((a, b) => a.score - b.score || a.progress.difference - b.progress.difference);\r\n        return trophies;\r\n    }\r\n\r\n    getCurrentProgress() {\r\n        /**\r\n         * Finds how many laff points the toon has remaining. (1/2/3)\r\n         * \r\n         * @returns {int} - containing how many laff boosts the toon has acquired\r\n         */\r\n        let count = 0;\r\n        for (const trophy of this.golf_info) {\r\n            const earned = this.toon[trophy.description] || 0;\r\n            for (const val of trophy.values) {\r\n                if (earned >= val) {\r\n                    count += 1;\r\n                }\r\n            }\r\n        }\r\n        return Math.floor(count / 10);\r\n    }\r\n\r\n    getTotalEarned() {\r\n        /**\r\n         * Finds how many trophies the toon has earned.\r\n         * \r\n         * @returns {int} - containing trophies earned\r\n         */\r\n        let count = 0;\r\n        for (const trophy of this.golf_info) {\r\n            const earned = this.toon[trophy.description] || 0;\r\n            for (const val of trophy.values) {\r\n                if (earned >= val) {\r\n                    count += 1;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    getCompletedTrophies() {\r\n        let count = 0;\r\n        const trophies = [];\r\n        for (const trophy of this.golf_info) {\r\n            const earned = this.toon[trophy.description] || 0;\r\n            for (const val of trophy.values) {\r\n                if (earned >= val) {\r\n                    count += 1;\r\n                }\r\n            }\r\n            trophies.push([trophy.description, count]);\r\n            count = 0;\r\n        }\r\n        return trophies;\r\n    }\r\n}\r\n\r\n","export default class RacingCalculator {\r\n    constructor(data) {\r\n        /**\r\n         * Initializes the racing calculator.\r\n         *\r\n         *@param {string} data: JSON containing the toon's race progress.\r\n         */\r\n        this.race_info = null;\r\n        this.loadRacingData();\r\n\r\n        this.toon = JSON.parse(data);\r\n        this.toon = Object.fromEntries(this.toon.map(trophy => [trophy.name, trophy.num]));\r\n    }\r\n\r\n    async loadRacingData() {\r\n        try {\r\n            const response = await import('../data/race_trophies.json');\r\n            this.race_info = response.trophies;\r\n        } catch (error) {\r\n            console.error('Error loading racing data:', error);\r\n        }\r\n    }\r\n\r\n    getBestTrophy() {\r\n        /**\r\n         * Finds the easiest trophies to complete (closest to next requirement)\r\n         * \r\n         * @returns {Object[]} - JSON containing list of all uncompleted trophies. Index 0 has the easiest trophy.\r\n         *   Each trophy has the following format:\r\n         *       name: The trophy's name (generalized)\r\n         *       progress.current: The current progress\r\n         *       progress.required: The next required trophy value.\r\n         *       progress.difference: The difference to the requirement.\r\n         */\r\n        const trophies = [];\r\n        for (const trophy of this.race_info) {\r\n            const count = this.toon[trophy.description];\r\n            for (const req of trophy.values) {\r\n                if (count < req) {\r\n                    const diff = req - count;\r\n                    const weight = trophy.weight;\r\n                    const score = weight * diff;\r\n                    trophies.push({\r\n                        name: trophy.description,\r\n                        progress: {\r\n                            current: count,\r\n                            required: req,\r\n                            difference: diff\r\n                        },\r\n                        score: score\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        trophies.sort((a, b) => a.score - b.score || a.progress.difference - b.progress.difference);\r\n        return trophies;\r\n    }\r\n\r\n    getCurrentProgress() {\r\n        /**\r\n         * Finds how many laff points the toon has remaining. (1/2/3)\r\n         * \r\n         * @returns {int} - containing how many laff boosts the toon has acquired\r\n         */\r\n        let count = 0;\r\n        for (const trophy of this.race_info) {\r\n            const earned = this.toon[trophy.description] || 0;\r\n            for (const val of trophy.values) {\r\n                if (earned >= val) {\r\n                    count += 1;\r\n                }\r\n            }\r\n        }\r\n        return Math.floor(count / 10);\r\n    }\r\n\r\n    getTotalEarned() {\r\n        /**\r\n         * Finds how many trophies the toon has earned.\r\n         * \r\n         * @returns {int} - containing trophies earned\r\n         */\r\n        let count = 0;\r\n        for (const trophy of this.race_info) {\r\n            const earned = this.toon[trophy.description] || 0;\r\n            for (const val of trophy.values) {\r\n                if (earned >= val) {\r\n                    count += 1;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    getCompletedTrophies() {\r\n        let count = 0;\r\n        const trophies = [];\r\n        for (const trophy of this.race_info) {\r\n            const earned = this.toon[trophy.description] || 0;\r\n            for (const val of trophy.values) {\r\n                if (earned >= val) {\r\n                    count += 1;\r\n                }\r\n            }\r\n            trophies.push([trophy.description, count]);\r\n            count = 0;\r\n        }\r\n        return trophies;\r\n    }\r\n}\r\n\r\n","export default class SuitsCalculator {\r\n    constructor(data) {\r\n        /**\r\n         *Initializes the suits calculator.\r\n         *\r\n         * @param {string} data - JSON containing the toon's suits progress.\r\n         */\r\n        this.suits_info = null;\r\n        this.loadSuitsData();\r\n\r\n        this.toon = JSON.parse(data);\r\n    }\r\n\r\n    async loadSuitsData() {\r\n        try {\r\n            const response = await import('../data/suits.json');\r\n            this.suits_info = response;\r\n        } catch (error) {\r\n            console.error('Error loading suits data:', error);\r\n        }\r\n    }\r\n\r\n    getCurrent(department) {\r\n        /**\r\n         * @param {string} department - Value in [c,l,m,s]\r\n         * @returns Toon's current promo experience\r\n         */\r\n        return this.toon[department].promotion.current;\r\n    }\r\n\r\n    getTarget(department) {\r\n        /**\r\n         * @param {string} department - Value in [c,l,m,s]\r\n         * @returns Toon's current target experience\r\n         */\r\n        return this.toon[department].promotion.target;\r\n    }\r\n\r\n    getNeeded(department) {\r\n        /**\r\n         * @param {string} department - Value in [c,l,m,s]\r\n         * @returns Toon's needed experience to promo\r\n         */\r\n        return this.getTarget(department) - this.getCurrent(department);\r\n    }\r\n\r\n    getBestPathWeighted(department) {\r\n        /**\r\n         * Returns the optimal facility path to get to promotion, with facilities weighted by time.\r\n         *\r\n         * @param {string} department - Value in [c,l,m,s]\r\n         * @returns {Object[]} - JSON with optimal path and total value\r\n         *   If toon is maxed or has promotion, it will return with a message.\r\n         *   If toon does not have a disguise, it will return with a message.\r\n         */\r\n        const toonInfo = this.toon[department];\r\n        \r\n        if (!toonInfo.hasDisguise) {\r\n            return {\r\n                path: [],\r\n                total: -1,\r\n                message: \"Toon does not have a disguise.\"\r\n            };\r\n        }\r\n\r\n        if (toonInfo.promotion.target === toonInfo.promotion.current) {\r\n            return {\r\n                path: [],\r\n                total: -2,\r\n                message: \"Toon has their promotion.\"\r\n            }\r\n        }\r\n        \r\n        const facilities = this.#getFacilityData(department);\r\n        let remaining = toonInfo.promotion.target - toonInfo.promotion.current;\r\n            \r\n        facilities.sort((a,b) => {\r\n            return (b.value / b.weight) - (a.value / a.weight);\r\n        })\r\n        \r\n        let total = 0;\r\n        let path = [];\r\n        \r\n        for (const facility of facilities) {\r\n            const overflow = facility.value * 0.44;\r\n            while (total + facility.value < remaining || \r\n                total + facility.value <= remaining + overflow ||\r\n                total + facility.value <= remaining - overflow\r\n                ) {\r\n                path.push(facility.name);\r\n                total += facility.value;\r\n\r\n                if (total + facility.value > remaining + overflow) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (total == 0) {\r\n            const last = facilities[facilities.length-1];\r\n            path.push(last.name);\r\n            total += last.value;\r\n        }\r\n\r\n\r\n        return {\r\n            path: path,\r\n            total: total >= remaining ? total : remaining\r\n        };\r\n    }\r\n\r\n    getBestPath(department) {\r\n        /**\r\n         * Returns the optimal facility path to get to promotion.\r\n         *\r\n         * @param {string} department - Value in [c,l,m,s]\r\n         * @returns {Object[]} - JSON with optimal path and total value\r\n         *   If toon is maxed or has promotion, it will return with a message.\r\n         *   If toon does not have a disguise, it will return with a message.\r\n         */\r\n        const facilities = this.#getFacilityData(department);\r\n        const toonInfo = this.toon[department];\r\n\r\n        if (toonInfo.hasDisguise) {\r\n            const target = toonInfo.promotion.target;\r\n\r\n            const margin = target * 0.1; \r\n            const adjustedTarget = target + margin;\r\n          \r\n            let total = 0;\r\n            let path = [];\r\n          \r\n            for (const facility of facilities) {\r\n                while (total < adjustedTarget) {\r\n                    if (total + facility.value <= adjustedTarget) {\r\n                    total += facility.value;\r\n                    path.push(facility.name + \" \" + facility.value);\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                if (total >= adjustedTarget) {\r\n                    break; // Stop if we've met or exceeded the adjusted target\r\n                }\r\n            }\r\n\r\n            return {\r\n                path: path,\r\n                total: total\r\n            };\r\n\r\n        } else {\r\n            return {\r\n                path: [],\r\n                total: -1,\r\n                message: \"Toon does not have a disguise.\"\r\n            };\r\n        }\r\n    }\r\n\r\n    #getFacilityData(department) {\r\n        /**\r\n         * Grabs facility data based off of department.\r\n         *\r\n         * @param {string} department - Value in [c,l,m,s]\r\n         * @returns The corresponding department's facility information and values\r\n         */\r\n        const facility = this.suits_info.suitTypes[department].facility;\r\n        return this.suits_info.facilities[facility];\r\n    }\r\n}\r\n    \r\n\r\n"],"names":[],"mappings":"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"}